(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{455:function(t,e,r){"use strict";r.r(e);var n=r(18),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"算法思维：贪心、分治、回溯、动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法思维：贪心、分治、回溯、动态规划"}},[t._v("#")]),t._v(" 算法思维：贪心、分治、回溯、动态规划")]),t._v(" "),r("h2",{attrs:{id:"贪心算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),r("p",[t._v("顾名思义，贪心即每一次都做收益率最大的选择。")]),t._v(" "),r("p",[t._v("应用场景：使具有"),r("strong",[t._v("限制值")]),t._v("和"),r("strong",[t._v("期望值")]),t._v("。要求在满足限制值的情况下，获取最大期望值。")]),t._v(" "),r("p",[t._v("核心思想：每次选择时，选择能以最小代价得到相同期望值的选项。")]),t._v(" "),r("p",[t._v("验证：贪心每次选择当前最优项，但不一定是广义的最优解，因此需要进行例举验证。")]),t._v(" "),r("p",[t._v("难点：将要解决的问题抽象成贪心算法模型。")]),t._v(" "),r("p",[r("strong",[t._v("练习")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/assign-cookies/",target:"_blank",rel:"noopener noreferrer"}},[t._v("分发饼干"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大子序和"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/gas-station/",target:"_blank",rel:"noopener noreferrer"}},[t._v("加油站"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/queue-reconstruction-by-height/",target:"_blank",rel:"noopener noreferrer"}},[t._v("根据身高重建队列"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/",target:"_blank",rel:"noopener noreferrer"}},[t._v("用最少数量的箭引爆气球"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"分治"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分治"}},[t._v("#")]),t._v(" 分治")]),t._v(" "),r("p",[t._v("分而治之。")]),t._v(" "),r("p",[t._v("拆分为子问题 -> 子问题求解 -> 将子问题合并为原问题的解。")]),t._v(" "),r("p",[t._v("应用场景：")]),t._v(" "),r("ol",[r("li",[t._v("原问题与分解成的小问题具有相同的模式；")]),t._v(" "),r("li",[t._v("原问题分解成的子问题可以独立求解，子问题之间没有相关性")]),t._v(" "),r("li",[t._v("具有分解终止条件")]),t._v(" "),r("li",[t._v("可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。")])]),t._v(" "),r("blockquote",[r("p",[t._v("创新并非离我们很远，创新的源泉来自对事物本质的认识。无数优秀架构设计的思想来源都是基础的数据结构和算法，这本身就是算法的一个魅力所在。")])]),t._v(" "),r("p",[r("strong",[t._v("练习")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"}},[t._v("多数元素"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"回溯"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[t._v("#")]),t._v(" 回溯")]),t._v(" "),r("p",[t._v("回溯的本质是纯暴力穷举。")]),t._v(" "),r("p",[t._v("面对岔路口时，随意选择一条路，当发现这条路走不通的时候，就回退到上一个岔路口，另选一种走法继续走。")]),t._v(" "),r("p",[t._v("剪枝：在实现的过程中，剪枝操作是提高回溯效率的一种技巧。利用剪枝，我们并不需要穷举搜索所有的情况，从而提高搜索效率。")]),t._v(" "),r("h3",{attrs:{id:"算法框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法框架"}},[t._v("#")]),t._v(" 算法框架")]),t._v(" "),r("p",[t._v("解决一个回溯问题，实际上就是一个决策树的遍历过程。几个关键因素：")]),t._v(" "),r("ul",[r("li",[t._v("路径：记录已做过的选择")]),t._v(" "),r("li",[t._v("选择列表：当前可做的选择")]),t._v(" "),r("li",[t._v("结束条件：到决策树底部，无法再做选择的条件")])]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("result "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 满足结束条件"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tresult"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 选择 "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t做选择\n\tbacktrack"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    撤销选择\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br")])]),r("p",[t._v("前序进行选择，后序撤销选择")]),t._v(" "),r("p",[t._v("回溯的经典问题：")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/subsets/",target:"_blank",rel:"noopener noreferrer"}},[t._v("子集"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/combinations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("全排列"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/eight-queens-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("八皇后"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"}},[t._v("解数独"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("括号生成"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/regular-expression-matching/",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式匹配"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);