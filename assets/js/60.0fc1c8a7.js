(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{449:function(v,_,t){"use strict";t.r(_);var a=t(18),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"算法思维：贪心、分治、回溯、动态规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法思维：贪心、分治、回溯、动态规划"}},[v._v("#")]),v._v(" 算法思维：贪心、分治、回溯、动态规划")]),v._v(" "),t("h2",{attrs:{id:"贪心算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[v._v("#")]),v._v(" 贪心算法")]),v._v(" "),t("p",[v._v("顾名思义，贪心即每一次都做收益率最大的选择。")]),v._v(" "),t("p",[v._v("应用场景：使具有"),t("strong",[v._v("限制值")]),v._v("和"),t("strong",[v._v("期望值")]),v._v("。要求在满足限制值的情况下，获取最大期望值。")]),v._v(" "),t("p",[v._v("核心思想：每次选择时，选择能以最小代价得到相同期望值的选项。")]),v._v(" "),t("p",[v._v("验证：贪心每次选择当前最优项，但不一定是广义的最优解，因此需要进行例举验证。")]),v._v(" "),t("p",[v._v("难点：将要解决的问题抽象成贪心算法模型。")]),v._v(" "),t("h2",{attrs:{id:"分治"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分治"}},[v._v("#")]),v._v(" 分治")]),v._v(" "),t("p",[v._v("分而治之。")]),v._v(" "),t("p",[v._v("拆分为子问题 -> 子问题求解 -> 将子问题合并为原问题的解。")]),v._v(" "),t("p",[v._v("应用场景：")]),v._v(" "),t("ol",[t("li",[v._v("原问题与分解成的小问题具有相同的模式；")]),v._v(" "),t("li",[v._v("原问题分解成的子问题可以独立求解，子问题之间没有相关性")]),v._v(" "),t("li",[v._v("具有分解终止条件")]),v._v(" "),t("li",[v._v("可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。")])]),v._v(" "),t("blockquote",[t("p",[v._v("创新并非离我们很远，创新的源泉来自对事物本质的认识。无数优秀架构设计的思想来源都是基础的数据结构和算法，这本身就是算法的一个魅力所在。")])]),v._v(" "),t("h2",{attrs:{id:"回溯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[v._v("#")]),v._v(" 回溯")]),v._v(" "),t("p",[v._v("面对岔路口时，随意选择一条路，当发现这条路走不通的时候，就回退到上一个岔路口，另选一种走法继续走。")]),v._v(" "),t("p",[v._v("递归：回溯算法非常适合用递归来实现")]),v._v(" "),t("p",[v._v("剪枝：在实现的过程中，剪枝操作是提高回溯效率的一种技巧。利用剪枝，我们并不需要穷举搜索所有的情况，从而提高搜索效率。")]),v._v(" "),t("p",[v._v("回溯的经典问题：")]),v._v(" "),t("p",[v._v("深度优先搜索、八皇后、0-1 背包问题、图的着色、旅行商问题、数独、全排列、正则表达式匹配")])])}),[],!1,null,null,null);_.default=s.exports}}]);