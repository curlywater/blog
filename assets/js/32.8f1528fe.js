(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{423:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript变量与数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript变量与数据类型"}},[t._v("#")]),t._v(" JavaScript变量与数据类型")]),t._v(" "),a("h2",{attrs:{id:"javascript有哪些基本数据类型？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript有哪些基本数据类型？"}},[t._v("#")]),t._v(" JavaScript有哪些基本数据类型？")]),t._v(" "),a("p",[t._v("JavaScript有八大基本数据类型，分别是null, undefined, number, bigint, string, boolean, symbol, object")]),t._v(" "),a("p",[t._v("前面七种是原始类型，"),a("code",[t._v("object")]),t._v("是引用类型。")]),t._v(" "),a("h2",{attrs:{id:"原始类型和引用类型有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型和引用类型有什么区别？"}},[t._v("#")]),t._v(" 原始类型和引用类型有什么区别？")]),t._v(" "),a("p",[t._v("本质上的区别在于在内存中的存储方式。")]),t._v(" "),a("p",[t._v("原始类型的值直接存放在栈中；而引用类型则是把值存放在堆中，栈中存放堆中该值所在的地址，引用值的地址所以称之为引用类型。")]),t._v(" "),a("p",[t._v("存储方式的设计决定了原始类型不可变的特性。栈中分配给一个数据的内存空间在数据入栈时就已固定，无法再更改。在程序中一般使用变量作为数据的载体，当对一个存储原始类型数据的变量进行操作再赋值时，其实是在栈中为新数据划分内存空间，再将变量指向这块空间。举例来说"),a("code",[t._v('str += "1"')]),t._v('这样的操作，字符串"1"并没有被修改。')]),t._v(" "),a("p",[t._v("引用类型则没有不可变的限制，由于其值存放在堆中，堆中的空间是动态的，对堆中内容进行修改，并没有更改其在堆中的地址。")]),t._v(" "),a("p",[t._v("与对象不同，原始类型数据本身只存了一个值，它本身并没有带属性和方法。在访问原始类型的属性和方法时，JavaScript内部创建一个对象包装器，包含原始值和对象上的方法。执行完操作之后返回新值，并将对象包装器销毁。这也就是对原始类型变量做属性更改操作，最终属性未添加成功的原因。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"不同类型的数据之间是怎么转换的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同类型的数据之间是怎么转换的？"}},[t._v("#")]),t._v(" 不同类型的数据之间是怎么转换的？")]),t._v(" "),a("h3",{attrs:{id:"原始类型转换为引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型转换为引用类型"}},[t._v("#")]),t._v(" 原始类型转换为引用类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原始类型可以通过"),a("code",[t._v("Object()")]),t._v("函数转换为引用类型。"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("会被转换为空对象，其他类型转换为对应的包装对象。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("number/string/boolean")]),t._v("也可以通过构造函数创建包装对象，例如"),a("code",[t._v('new String("123")')]),t._v("，"),a("code",[t._v("BigInt/Symbol")]),t._v("函数不能当作构造函数使用。")])])]),t._v(" "),a("p",[t._v("原始类型的对应函数：")]),t._v(" "),a("ul",[a("li",[t._v("当作包装函数使用，效果是数据类型转换；")]),t._v(" "),a("li",[t._v("当作构造函数使用，效果是产生包装对象。")])]),t._v(" "),a("h3",{attrs:{id:"原始类型间转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型间转换"}},[t._v("#")]),t._v(" 原始类型间转换")]),t._v(" "),a("p",[t._v("首先是比较特殊的类型：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("可转出，无法转入")]),t._v(" "),a("li",[a("code",[t._v("symbol")]),t._v("类型\n"),a("ul",[a("li",[t._v("转出：只能转换为"),a("code",[t._v("boolean")]),t._v("，其他转换抛出"),a("code",[t._v("TypeError")])]),t._v(" "),a("li",[t._v("转入：直接转为"),a("code",[t._v("symbol")]),t._v("，原始值转换为字符串描述")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原数据类型")]),t._v(" "),a("th",[t._v("Number()转换规则")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("bigInt")]),t._v(" "),a("td",[t._v("转换为普通整数，超出安全整数范围可能会出现精度丢失")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("忽视前后空格从左到右转换字符，遇到无法转换为数字的字符返回"),a("code",[t._v("NaN")]),a("br"),t._v("如果最终是空字符串返回"),a("code",[t._v("0")])])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[a("code",[t._v("false")]),t._v("转换为"),a("code",[t._v("0")]),t._v("，"),a("code",[t._v("true")]),t._v("转换为"),a("code",[t._v("1")])])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[a("code",[t._v("0")])])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[a("code",[t._v("NaN")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原数据类型")]),t._v(" "),a("th",[t._v("BigInt()转换规则")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("number")]),t._v(" "),a("td",[t._v("只能转换整数，非整数抛出"),a("code",[t._v("RangeError")])])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("转换过程类似string to number，"),a("br"),t._v("无法转换为整数的字符串，抛出"),a("code",[t._v("SyntaxError")])])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[a("code",[t._v("false")]),t._v("转换为"),a("code",[t._v("0n")]),t._v("，"),a("code",[t._v("true")]),t._v("转换为"),a("code",[t._v("1n")])])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[a("code",[t._v("TypeError")])])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[a("code",[t._v("TypeError")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原数据类型")]),t._v(" "),a("th",[t._v("String()转换规则")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("简单转换为字符串")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原数据类型")]),t._v(" "),a("th",[t._v("Boolean()转换规则")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[a("code",[t._v("0")]),t._v(","),a("code",[t._v("0n")]),t._v(", "),a("code",[t._v("null")]),t._v(","),a("code",[t._v("undefined")]),t._v(","),a("code",[t._v("NaN")]),t._v(","),a("code",[t._v('""')]),t._v(" -> "),a("code",[t._v("false")])])])])]),t._v(" "),a("h3",{attrs:{id:"引用类型转换为原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型转换为原始类型"}},[t._v("#")]),t._v(" 引用类型转换为原始类型")]),t._v(" "),a("p",[t._v("Boolean转换：按照ECMA规范，"),a("code",[t._v("object")]),t._v("转换为"),a("code",[t._v("boolean")]),t._v("，其值为"),a("code",[t._v("true")])]),t._v(" "),a("p",[t._v("其他原始类型转换：采用toPrimitive机制。")]),t._v(" "),a("p",[a("strong",[t._v("toPrimitive机制")])]),t._v(" "),a("p",[t._v("引用类型转换为原始类型的期望值"),a("code",[t._v("hint")]),t._v("只有三种"),a("code",[t._v('"string"/"number"/"default"')])]),t._v(" "),a("p",[t._v("JavaScript规范明确定义各种转换情况对应的期望值，然后调用"),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v("进行转换")]),t._v(" "),a("ul",[a("li",[t._v("如果"),a("code",[t._v("hint")]),t._v("是"),a("code",[t._v('"number"/"default"')]),t._v("，先调用"),a("code",[t._v("valueOf")]),t._v("，如果返回值不是原始类型，再调用"),a("code",[t._v("toString")]),t._v("，")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("hint")]),t._v("是"),a("code",[t._v('"string"')]),t._v("，先调用"),a("code",[t._v("toString")]),t._v("，如果返回值不是原始类型，再调用"),a("code",[t._v("valueOf")]),t._v("，")]),t._v(" "),a("li",[t._v("如果最终返回值不是原始类型，抛出"),a("code",[t._v("TypeError")])])]),t._v(" "),a("p",[t._v("为了防止"),a("code",[t._v("TypeError")]),t._v("错误，一般规定"),a("code",[t._v("toString")]),t._v("的返回值需要是原始类型值。")]),t._v(" "),a("h2",{attrs:{id:"隐式转换的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换的场景"}},[t._v("#")]),t._v(" 隐式转换的场景")]),t._v(" "),a("ul",[a("li",[t._v("布尔值转换：条件判断，非逻辑，或与逻辑在判断时进行转换（或与逻辑返回原始值）")]),t._v(" "),a("li",[t._v("数值转换：算数操作，一元运算符，值比较（不进行转换的特例：同为字符串/同为对象/相等比较中的null和undefined）")]),t._v(" "),a("li",[t._v("字符串转换：二元加法运算符其中一个运算元是字符串，String方法调用")])]),t._v(" "),a("h2",{attrs:{id:"有哪些判断数据类型的方法，分别适用于什么场景？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些判断数据类型的方法，分别适用于什么场景？"}},[t._v("#")]),t._v(" 有哪些判断数据类型的方法，分别适用于什么场景？")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("ol",[a("li",[t._v("用于判断原始类型。注意"),a("code",[t._v("typeof null")]),t._v("是"),a("code",[t._v("object")]),t._v("，这是一个语言设计的bug，需要另外判断")]),t._v(" "),a("li",[t._v("用于判断是否是函数，"),a("code",[t._v("typeof function")]),t._v("，"),a("code",[t._v("function")]),t._v("是一个"),a("code",[t._v("object")]),t._v("类型的数据，但会具体识别为"),a("code",[t._v("function")])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "bigint"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"instanceof-isprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-isprototypeof"}},[t._v("#")]),t._v(" instanceof/isPrototypeOf()")]),t._v(" "),a("p",[a("code",[t._v("A instanceof ClassB")]),t._v("，判断"),a("code",[t._v("ClassB.prototype")]),t._v("是否在"),a("code",[t._v("A")]),t._v("的原型链上。")]),t._v(" "),a("ol",[a("li",[t._v("原始类型数据本身不是对象，没有原型链，因此不能使用"),a("code",[t._v("instanceof")]),t._v("判断")]),t._v(" "),a("li",[t._v("可判断引用类型对象，是否继承自另一个对象")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\nClassB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassB")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString")]),t._v(" "),a("p",[t._v("所有对象都继承"),a("code",[t._v("Object.prototype")]),t._v("上的属性和方法，其中就包括"),a("code",[t._v("toString")]),t._v("方法。"),a("code",[t._v("Object.prototype.toString()")]),t._v("会检查"),a("code",[t._v("this")]),t._v("返回"),a("code",[t._v("[object type]")]),t._v("，"),a("code",[t._v("type")]),t._v("是对象的类型。")]),t._v(" "),a("p",[t._v("内置包装对象（"),a("code",[t._v("String/Number/Boolean...")]),t._v("）、扩展对象（"),a("code",[t._v("Array/Date/RegExp/Function...")]),t._v("）都重写了"),a("code",[t._v("toString")]),t._v("方法。因此需要通过"),a("code",[t._v("call")]),t._v("来调用"),a("code",[t._v("Object.prototype.toString")]),t._v("方法获取包含对象类型信息的字符串")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Boolean]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Number]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Function]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("通过"),a("code",[t._v("Symbol.toStringTag")]),t._v("属性自定义"),a("code",[t._v("Object.prototype.toString")]),t._v("方法返回值")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toStringTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object User]")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ""')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);