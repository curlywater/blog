(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{452:function(e,t,r){"use strict";r.r(t);var n=r(18),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"算法思维：贪心、分治、回溯、动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法思维：贪心、分治、回溯、动态规划"}},[e._v("#")]),e._v(" 算法思维：贪心、分治、回溯、动态规划")]),e._v(" "),r("p",[e._v("当我们面对列举所有可能、求最优解之类的问题，其实是在考虑如何做选择，然后用计算机模拟这个过程。常见的方法有：")]),e._v(" "),r("ul",[r("li",[e._v("贪心：择优。每次面对岔路口时，选择当前最优的一条路。但有局限，局部最优不一定是广义的最优解。")]),e._v(" "),r("li",[e._v("回溯：暴力穷举。面对岔路口时，随意选择一条路，当发现这条路走不通的时候，就回退到上一个岔路口，另选一种走法继续走。可以使用备忘录记录已计算过的结果、使用剪枝避免不比较的计算。")]),e._v(" "),r("li",[e._v("动态规划：优化穷举。由已知状态递推出未知状态。")])]),e._v(" "),r("h2",{attrs:{id:"贪心算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[e._v("#")]),e._v(" 贪心算法")]),e._v(" "),r("p",[e._v("顾名思义，贪心即每一次都做收益率最大的选择。")]),e._v(" "),r("p",[e._v("应用场景：使具有"),r("strong",[e._v("限制值")]),e._v("和"),r("strong",[e._v("期望值")]),e._v("。要求在满足限制值的情况下，获取最大期望值。")]),e._v(" "),r("p",[e._v("核心思想：每次选择时，选择能以最小代价得到相同期望值的选项。")]),e._v(" "),r("p",[e._v("验证：贪心每次选择当前最优项，但不一定是广义的最优解，因此需要进行例举验证。")]),e._v(" "),r("p",[e._v("难点：将要解决的问题抽象成贪心算法模型。")]),e._v(" "),r("p",[r("strong",[e._v("练习")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/assign-cookies/",target:"_blank",rel:"noopener noreferrer"}},[e._v("分发饼干"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最大子序和"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/gas-station/",target:"_blank",rel:"noopener noreferrer"}},[e._v("加油站"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/queue-reconstruction-by-height/",target:"_blank",rel:"noopener noreferrer"}},[e._v("根据身高重建队列"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/",target:"_blank",rel:"noopener noreferrer"}},[e._v("用最少数量的箭引爆气球"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"分治"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分治"}},[e._v("#")]),e._v(" 分治")]),e._v(" "),r("p",[e._v("分而治之。")]),e._v(" "),r("p",[e._v("拆分为子问题 -> 子问题求解 -> 将子问题合并为原问题的解。")]),e._v(" "),r("p",[e._v("应用场景：")]),e._v(" "),r("ol",[r("li",[e._v("原问题与分解成的小问题具有相同的模式；")]),e._v(" "),r("li",[e._v("原问题分解成的子问题可以独立求解，子问题之间没有相关性")]),e._v(" "),r("li",[e._v("具有分解终止条件")]),e._v(" "),r("li",[e._v("可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。")])]),e._v(" "),r("p",[r("strong",[e._v("练习")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("多数元素"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"回溯"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[e._v("#")]),e._v(" 回溯")]),e._v(" "),r("p",[e._v("回溯的本质是纯暴力穷举。")]),e._v(" "),r("p",[e._v("面对岔路口时，随意选择一条路，当发现这条路走不通的时候，就回退到上一个岔路口，另选一种走法继续走。")]),e._v(" "),r("p",[e._v("剪枝：在实现的过程中，剪枝操作是提高回溯效率的一种技巧。利用剪枝，我们并不需要穷举搜索所有的情况，从而提高搜索效率。")]),e._v(" "),r("h3",{attrs:{id:"算法框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法框架"}},[e._v("#")]),e._v(" 算法框架")]),e._v(" "),r("p",[e._v("解决一个回溯问题，实际上就是一个决策树的遍历过程。几个关键因素：")]),e._v(" "),r("ul",[r("li",[e._v("路径：记录已做过的选择")]),e._v(" "),r("li",[e._v("选择列表：当前可做的选择")]),e._v(" "),r("li",[e._v("结束条件：到决策树底部，无法再做选择的条件")])]),e._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[e._v("result "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("backtrack")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" 满足结束条件"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tresult"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" 选择 "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t做选择\n\tbacktrack"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("路径"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" 选择列表"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    撤销选择\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br")])]),r("p",[e._v("前序进行选择，后序撤销选择")]),e._v(" "),r("p",[e._v("回溯的经典问题：")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/subsets/",target:"_blank",rel:"noopener noreferrer"}},[e._v("子集"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/combinations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("组合"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("全排列"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/eight-queens-lcci/",target:"_blank",rel:"noopener noreferrer"}},[e._v("八皇后"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("解数独"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[e._v("括号生成"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/regular-expression-matching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("正则表达式匹配"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[e._v("#")]),e._v(" 动态规划")]),e._v(" "),r("h3",{attrs:{id:"思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思想"}},[e._v("#")]),e._v(" 思想")]),e._v(" "),r("p",[e._v("动态规划本质是利用历史记录对穷举进行优化：记录重叠子问题的计算结果，避免重复计算。")]),e._v(" "),r("p",[e._v("因此，发现重叠子问题是动态规划核心步骤。"),r("strong",[e._v("存在重叠子问题的穷举场景，可以应用动态规划解决。")])]),e._v(" "),r("p",[e._v("任何事物都有状态，选择就会改变状态，那么状态也就是某一时刻的历史记录。只要记录状态对应的计算结果，依赖已有的状态逐步递推就能得到最终状态的计算结果。")]),e._v(" "),r("p",[e._v("一个问题对应多个状态，容易出现多维数组记录的情况，寻找依赖的单调性将记录降维，这称为“状态压缩”。这一步骤直接降低空间和时间复杂度，注入灵魂，完成算法升华。")]),e._v(" "),r("h3",{attrs:{id:"步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[e._v("#")]),e._v(" 步骤")]),e._v(" "),r("ol",[r("li",[e._v("状态：确定会改变的量；")]),e._v(" "),r("li",[e._v("选择：确定选择的内容；")]),e._v(" "),r("li",[e._v("定义：确定状态和目标值，dp[状态] = 结果(选择1，选择2，选择3)，用语言表达选择一/选择二/选择三...对应的状态依赖和目标值更改；")]),e._v(" "),r("li",[e._v("dp：用公式表示状态和目标值的关系；")]),e._v(" "),r("li",[e._v("base case：确定初始值；")]),e._v(" "),r("li",[e._v("优化：通过画图模拟状态转移过程，确定能否进行状态压缩。")])]),e._v(" "),r("h3",{attrs:{id:"练习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[e._v("#")]),e._v(" 练习")]),e._v(" "),r("p",[r("strong",[e._v("了解步骤后，该做些什么？")])]),e._v(" "),r("p",[e._v("多练。"),r("a",{attrs:{href:"https://leetcode-cn.com/tag/dynamic-programming/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Leetcode 动态规划标签"),r("OutboundLink")],1),e._v("下的简单题，利用动规的基本步骤可以全部解完。")]),e._v(" "),r("p",[r("strong",[e._v("如何确定状态")]),e._v("？")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"}},[e._v("198.打家劫舍"),r("OutboundLink")],1),e._v(" VS "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"}},[e._v("337.打家劫舍III"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("strong",[e._v("如何进行状态压缩")]),e._v("？")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zhuang-tai-ya-suo-ji-qiao",target:"_blank",rel:"noopener noreferrer"}},[e._v("labuladong的算法小抄 —— 状态压缩：对动态规划进行降维打击"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"经典系列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#经典系列"}},[e._v("#")]),e._v(" 经典系列")]),e._v(" "),r("p",[r("strong",[e._v("股票买卖问题")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机 II"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最佳买卖股票时机含冷冻期"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机含手续费"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机 III"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机 IV"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("strong",[e._v("路径问题")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"}},[e._v("62. 不同路径"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("64. 最小路径和"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("72. 编辑距离"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"学习资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#学习资料"}},[e._v("#")]),e._v(" 学习资料")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.zhihu.com/question/23995189/answer/1094101149",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是动态规划（Dynamic Programming）？动态规划的意义是什么？"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie",target:"_blank",rel:"noopener noreferrer"}},[e._v("labuladong —— 动态规划系列"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"http://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxODQxMDM0Mw==&action=getalbum&album_id=1318881141113536512&scene=173&from_msgid=2247484832&from_itemidx=1&count=40#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("labuladong公众号 —— 动态规划系列"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);